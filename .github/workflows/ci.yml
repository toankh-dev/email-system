name: CI - Build & Test

on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.9.0'

jobs:
  # Job 1: Code Quality Checks
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run lint:all (TypeScript + ESLint)
        run: pnpm lint:all

      - name: Run Prettier check
        run: pnpm exec prettier --check "**/*.{js,jsx,ts,tsx,css,scss}"

  # Job 2: Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint-and-typecheck

    strategy:
      matrix:
        environment: [staging, prod]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Create .env file for build
        run: |
          echo "NODE_ENV=production" > .env
          echo "APP_ENV=${{ matrix.environment }}" >> .env
          echo "NEXT_TELEMETRY_DISABLED=1" >> .env
          echo "NEXT_PUBLIC_ENABLE_ANALYTICS=false" >> .env
          echo "NEXT_PUBLIC_ENABLE_NEW_DASHBOARD=false" >> .env
          echo "NEXT_PUBLIC_ENABLE_EXPERIMENTAL_FEATURES=false" >> .env
          echo "BACKEND_URL=${{ secrets.BACKEND_URL || 'http://backend:8000' }}" >> .env

      - name: Build application (${{ matrix.environment }})
        run: pnpm build:${{ matrix.environment }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.environment }}-${{ github.sha }}
          path: |
            .next/
            !.next/cache
          retention-days: 7

  # Job 3: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-typecheck

    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run pnpm audit
        run: pnpm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
